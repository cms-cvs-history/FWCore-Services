#!/usr/bin/env python
from Tkinter import *
import sys
import profilereader

class Application(Frame):
    def __init__(self,filePrefix):
        Frame.__init__(self)
        self.profile = profilereader.ProfileData(sys.argv[1])
        top=self.winfo_toplevel() 
        top.rowconfigure(0, weight=1) 
        top.columnconfigure(0, weight=1)
        self.grid(sticky=N+S+E+W)
        self.rowconfigure(1,weight=1)
        self.columnconfigure(0,weight=1)
        firstFunc = self.profile.idToFunctionInfo[0]
        self.funcInfo = Label(self,text=firstFunc.name,justify=LEFT)
        self.funcInfo.grid(column=0,row=0,sticky=W)
        jump = Frame(self)
        jump.grid(column=0,row=1,sticky=N+S+E+W)
        jump.rowconfigure(1,weight=1)
        jump.columnconfigure(0,weight=1)
        jump.columnconfigure(2,weight=1)
        Label(jump,text="Caller of ->").grid(column=0,row=0)
        Label(jump,text="-> Descendent Calls").grid(column=2,row=0)
        callersY = Scrollbar(jump, orient=VERTICAL)
        callersY.grid(row=1,column=1,sticky=N+S)
        callersX = Scrollbar(jump, orient=HORIZONTAL)
        callersX.grid(row=2,column=0, sticky=E+W)
        self.callers = Listbox(jump, selectmode=SINGLE, xscrollcommand=callersX.set,
                               yscrollcommand=callersY.set)
        self.callers.grid(column=0,row=1,sticky=N+W+S+E)
        callersX['command']=self.callers.xview
        callersY['command']=self.callers.yview

        calleesY = Scrollbar(jump, orient=VERTICAL)
        calleesY.grid(row=1,column=3,sticky=N+S)
        calleesX = Scrollbar(jump, orient=HORIZONTAL)
        calleesX.grid(row=2,column=2, sticky=E+W)
        self.callees = Listbox(jump, selectmode=SINGLE,
                               xscrollcommand=calleesX.set,
                               yscrollcommand=calleesY.set)
        self.callees.grid(column=2,row=1,sticky=N+E+W+S)
        calleesX['command']=self.callees.xview
        calleesY['command']=self.callees.yview
        self.moveToFunction(firstFunc.name)
        self.callees.bind('<Double-Button-1>',self.selectCallee)
        self.callees.bind('<KeyRelease-Return>',self.selectCallee)
        self.callers.bind('<Double-Button-1>',self.selectCaller)
        self.callers.bind('<KeyRelease-Return>',self.selectCaller)
        #for callee in firstFunc.calleeList:
        #    self.callees.insert(END,callee.name)
    def moveToFunction(self,funcName):
        funcInfo = self.profile.idToFunctionInfo[self.profile.functionNameToId[funcName]]
        self.callers.delete(0,self.callers.size())
        self.callees.delete(0,self.callees.size())
        summary =     '         name: '+funcInfo.name
        summary += '\n       samples: '+str(funcInfo.leafCount)
        summary += '\n     % in func: '+str(funcInfo.fractionInFunctionOnly*100)
        summary += '\n% in func+desc: '+str(funcInfo.fractionInPath*100)
        self.funcInfo['text']=summary
        for frac,callee in funcInfo.calleeList:
            self.callees.insert(END,str(frac*100)[:4]+"% "+callee.name)
        for frac,caller in funcInfo.callerList:
            self.callers.insert(END,str(frac*100)[0:4]+"% "+caller.name)
    def selectCallee(self,dummy):
        selected = self.callees.curselection()
        if selected:
            funcName = self.callees.get(selected[0]).split("%")[1].strip()
            self.moveToFunction(funcName)
    def selectCaller(self,dummy):
        selected = self.callers.curselection()
        if selected:
            funcName = self.callers.get(selected[0]).split("%")[1].strip()
            self.moveToFunction(funcName)
                
app = Application(sys.argv[1])
app.master.title("SimpleProfilerViewer ("+sys.argv[1]+")")
app.mainloop()