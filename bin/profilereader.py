#!/usr/bin/env python
"""module to read profiling information generated by the SimpleProfiling Service
"""
import os
class FunctionInfo(object):
    """Holds the profiling information about one function
    """
    def __init__(self,attrList):
        self.address =attrList[0] 
        self.name =os.popen("c++filt  "+attrList[1]).read().strip()
        self.leafCount = int(attrList[2])
        self.countOfFunctPlusChildWithRecursion = int(attrList[3])
        self.countOfFunctPlusChild = int(attrList[4])
        self.fractionInFunctionOnly = float(attrList[5])
        self.fractionInPath = float(attrList[6])
        self.__callerTemp = dict()
        self.__calleeTemp = dict()
    def addCaller(self,caller,weight):
        #print caller.name, weight
        self.__callerTemp.setdefault(caller.name,[0,caller])[0]+=weight
    def addCallee(self,callee,weight):
        self.__calleeTemp.setdefault(callee.name,[0,callee])[0]+=weight
    def normalize(self):
        self.callerList = list()
        self.calleeList = list()
        for caller in self.__callerTemp.keys():
            (count,_caller) = self.__callerTemp[caller]
            self.callerList.append((float(count)/self.countOfFunctPlusChildWithRecursion,_caller))
        for callee in self.__calleeTemp.keys():
            (count,_callee) = self.__calleeTemp[callee]
            self.calleeList.append((float(count)/self.countOfFunctPlusChildWithRecursion,_callee))
        self.callerList.sort()
        self.callerList.reverse()
        self.calleeList.sort()
        self.calleeList.reverse()
class Path(object):
    def __init__(self,attrList):
        self.count = int(attrList[0])
        self.functionIds = [int(x) for x in attrList[1:] if x != '\n']
class ProfileData(object):
    def __init__(self,filePrefix):
        nameFile = file(filePrefix+'names','r')
        self.idToFunctionInfo = dict()
        self.functionNameToId = dict()
        for line in nameFile:
            infoList = line.split(' ')
            self.idToFunctionInfo.setdefault( int(infoList[0]), FunctionInfo(infoList[1:]))
            self.functionNameToId.setdefault(self.idToFunctionInfo[int(infoList[0])].name, int(infoList[0]))
        pathFile = file(filePrefix+'paths','r')
        self.paths = list()
        for line in pathFile:
            line.strip()
            path = Path( line.split(' ')[1:])
            self.paths.append(path)
            caller = None
            for funcId in path.functionIds:
                func = self.idToFunctionInfo[funcId]
                if caller:
                    func.addCaller(caller,path.count)
                    caller.addCallee(func,path.count)
                caller = func
        for x in self.idToFunctionInfo.items():
            x[1].normalize()

if __name__ == '__main__':
    import sys
    profile = ProfileData(sys.argv[1])
    print profile.idToFunctionInfo